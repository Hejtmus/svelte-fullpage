{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../Fullpage.svelte",
    "../FullpageSection.svelte",
    "../FullpageSlide.svelte",
    "../Dot.svelte",
    "../index.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import Indicator from './Indicator/index.svelte';\n    import {onMount, setContext} from \"svelte\";\n    import {writable} from \"svelte/store\";\n    //defining variable that will hold class value, that will be passed into this component's wrapper\n    let defaultClasses = '';\n\n    //importing slide animation from svelte\n    //import {slide} from 'svelte/transition';\n\n    //exporting classes, for passing classes into wrapper\n    export {defaultClasses as class};\n    export let style = '';\n    //number that hold which section is active\n    export let activeSection = 0;\n    const activeSectionStore = writable(activeSection)\n    let sectionCount = 0;\n    //array with names of section, the most important about this array is that it's hold fullpage's length TODO: make relevant\n    export let sectionTitles = false;\n    let sections = [];\n    //exporting duration of animation and scroll cooldown\n    export let transitionDuration = 500;\n    //exporting boolean that enables scrolling using arrows\n    export let arrows = false;\n    //exporting boolean that enables scrolling using drag\n    export let drag = false;\n    export let dragThreshold = 100;\n    export let touchThreshold = 75;\n    export let pullDownToRefresh = false;\n\n    let fullpageContent;\n\n    let dragStartPosition;\n    let touchStartPosition;\n\n    //extending exported classes with wrapper class\n    let classes = `${defaultClasses} svelte-fp-wrapper`;\n    let recentScroll = 0;\n    //setting section visible\n    let active = true;\n\n    // Passing data about section visibility to all sections\n    setContext('section', {\n        activeSectionStore,\n        getId: ()=>{\n            sectionCount++;\n            return sectionCount-1;\n        }\n    })\n\n    //function that handles scroll and sets scroll cooldown based on animation duration\n    const handleScroll = (event) => {\n        //getting direction of scroll, if negative, scroll up, if positive, scroll down\n        let deltaY = event.deltaY;\n        let timer = new Date().getTime();\n        //if cooldown time is up, fullpage is scrollable again\n        if (transitionDuration < timer-recentScroll) {\n            recentScroll = timer;\n            if (deltaY < 0) {\n                scrollUp()\n            } else if (deltaY > 0) {\n                scrollDown()\n            }\n        }\n    };\n    //function that toggles visibility of active section\n    const toggleActive = () => {\n        active = !active;\n    };\n    //function that makes scroll up effect\n    const scrollUp = async () => {\n        if ($activeSectionStore > 0){\n            activeSection--;\n        }\n    };\n    //function that makes scroll down effect\n    const scrollDown = async () => {\n        if ($activeSectionStore < sectionCount-1){\n            activeSection++;\n        }\n    };\n    //function that handles arrow event\n    const handleKey = (event) => {\n        if (arrows) {\n            switch (event.key) {\n                case 'ArrowDown':\n                    scrollDown();\n                    break;\n                case 'ArrowUp':\n                    scrollUp();\n                    break;\n            }\n        }\n    };\n    //function that handles drag start event\n    const handleDragStart = (event) => {\n        if (drag) {\n            dragStartPosition = event.screenY;\n        }\n        //event.preventDefault();\n    };\n    //function that handles drag end event\n    const handleDragEnd = (event) => {\n        if (drag) {\n            const dragEndPosition = event.screenY;\n            //console.log(`Start:${dragStartPosition}, End:${dragEndPosition}, vertical difference:${dragStartPosition-dragEndPosition}`);\n            if (dragStartPosition - dragEndPosition > dragThreshold) {\n                scrollDown();\n            } else if (dragStartPosition - dragEndPosition < -dragThreshold) {\n                scrollUp()\n            }\n        }\n        //event.preventDefault();\n    };\n    //function that handles touch event\n    const handleTouchStart = (event) => {\n        //event.preventDefault();\n        touchStartPosition = event.touches[0].screenY;\n    };\n    const handleTouchEnd = (event) => {\n        //event.preventDefault();\n        let timer = new Date().getTime();\n        const touchEndPosition = event.touches[0].screenY;\n        if (transitionDuration < timer-recentScroll) {\n            if (touchStartPosition - touchEndPosition > touchThreshold) {\n                scrollDown();\n                recentScroll = timer;\n            } else if (touchStartPosition - touchEndPosition < -touchThreshold) {\n                scrollUp();\n                recentScroll = timer;\n            }\n        }\n    };\n\n\n    // Everytime active session updates, also this store gets new value and then all sections that subscribe\n    $: activeSectionStore.set(activeSection)\n\n    $: if (sectionTitles) sections = sectionTitles;\n\n    $: if (fullpageContent && !sectionTitles) {\n        console.log(fullpageContent.children.length)\n        for (let i = 0; sectionCount > i; i++) {\n            sections = [\n                ...sections,\n                `Section ${i+1}`\n            ];\n        }\n    }\n</script>\n\n<svelte:window on:keydown={ (event)=>handleKey(event) }/>\n<svelte:body class:svelte-fp-disable-pull-refresh={pullDownToRefresh}/>\n\n\n<div class={classes} style={style} on:wheel={ (event)=>handleScroll(event) } on:touchstart={ (event)=>handleTouchStart(event) } on:touchmove={ (event)=>handleTouchEnd(event) }\n        on:drag={ ()=>{return false} } on:mousedown={ (event)=>handleDragStart(event) } on:mouseup={ (event)=>handleDragEnd(event) }>\n    <div class=\"svelte-fp-container\">\n        <div bind:this={fullpageContent} class=\"svelte-fp-container\">\n            <slot />\n        </div>\n        <Indicator bind:activeSection bind:sections/>\n    </div>\n</div>\n\n<style>\n    .svelte-fp-wrapper {\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        height: 100%;\n        width: 100%;\n        overflow: hidden;\n    }\n    .svelte-fp-container {\n        height: inherit;\n        width: inherit;\n        position: relative;\n    }\n    .svelte-fp-disable-pull-refresh {\n        overscroll-behavior: contain;\n    }\n</style>",
    "<script>\n    import {slide} from 'svelte/transition';\n    import {getContext, onMount, setContext} from \"svelte\";\n    import { writable } from \"svelte/store\";\n\n    //<FullpageSectionStatic bind:activeSection sectionId=\"id\"></FullpageSectionStatic>\n\n    let defaultClasses = '';\n\n    export { defaultClasses as class };\n    export let style = '';\n    let sectionId;\n    const { getId, activeSectionStore} = getContext('section');\n    export let slides = [];\n    export let activeSlide = 0;\n    const activeSlideStore = writable(activeSlide);\n    export let center = false;\n    export let arrows = false;\n    export let select = false;\n    export let transitionDuration = 500;\n    export let dragThreshold = 100;\n    export let touchThreshold = 75;\n    export let transition = {\n        duration: transitionDuration\n    };\n    sectionId = parseInt(sectionId);\n    let visible;\n\n    let activeSlideIndicator = activeSlide;\n    let dragStartPosition;\n    let touchStartPosition;\n    let recentSlide = 0;\n    let slideCount = 0;\n\n    let classes = `${defaultClasses} svelte-fp-section svelte-fp-flexbox-center`;\n\n    if (!select) {\n        classes = `${classes} svelte-fp-unselectable`\n    }\n\n    setContext('slide', {\n        activeSlideStore,\n        getId: ()=>{\n            slideCount++;\n            return slideCount-1;\n        }\n    })\n\n    const makePositive = (num) => {\n        //console.log(num);\n        let negative = false;\n        if (num < 0) {\n            negative = true;\n            num = -num;\n        }\n        //console.log(num);\n        //console.log(negative);\n        return {num, negative};\n    };\n\n    const handleSelect = () => {\n        if (!select) {\n            return false;\n        }\n    };\n\n    const slideRight = () => {\n        const active = makePositive($activeSlideStore);\n        if (active.num < slides.length-1){\n            activeSlideIndicator = active.num+1;\n            activeSlideStore.set(-(activeSlideIndicator));\n        } else {\n            activeSlideStore.set(0)\n            activeSlideIndicator = $activeSlideStore;\n        }\n    };\n\n    const slideLeft = () => {\n        const active = makePositive($activeSlideStore);\n        if (active.num > 0) {\n            activeSlideStore.set(active.num-1);\n        } else {\n            activeSlideStore.set(slides.length-1);\n        }\n        activeSlideIndicator = $activeSlideStore;\n    };\n\n    const toSlide = (slideId) => {\n        if (slideId > activeSlideIndicator) {\n            while (slideId > activeSlideIndicator) {\n                slideRight()\n            }\n        } else {\n            while (slideId < activeSlideIndicator) {\n                slideLeft()\n            }\n        }\n    };\n\n    //function that handles arrow event\n    const handleKey = (event) => {\n        if (arrows) {\n            switch (event.key) {\n                case 'ArrowLeft':\n                    slideLeft();\n                    break;\n                case 'ArrowRight':\n                    slideRight();\n                    break;\n            }\n        }\n    };\n\n    //function that handles drag start event\n    const handleDragStart = (event) => {\n        dragStartPosition = event.screenX;\n    };\n    //function that handles drag end event\n    const handleDragEnd = (event) => {\n        const dragEndPosition = event.screenX;\n        if (dragStartPosition - dragEndPosition > dragThreshold) {\n            slideRight();\n        } else if (dragStartPosition - dragEndPosition < -dragThreshold) {\n            slideLeft()\n        }\n    };\n    //function that handles touch event\n    const handleTouchStart = (event) => {\n        //event.preventDefault();\n        touchStartPosition = event.touches[0].screenX;\n    };\n    const handleTouchEnd = (event) => {\n        //event.preventDefault();\n        let timer = new Date().getTime();\n        const touchEndPosition = event.touches[0].screenX;\n        if (transitionDuration < timer-recentSlide) {\n            if (touchStartPosition - touchEndPosition > touchThreshold) {\n                slideRight();\n                recentSlide = timer;\n            } else if (touchStartPosition - touchEndPosition < -touchThreshold) {\n                slideLeft();\n                recentSlide = timer;\n            }\n        }\n    };\n\n    $: visible = (sectionId === $activeSectionStore);\n\n    $: activeSlideStore.set(activeSlide)\n\n    onMount(()=>{\n        sectionId = getId()\n    })\n    // Everytime section disappears, slide count resets, this prevents slides from getting wrong ID\n    $: if (!visible) {\n        slideCount = 0;\n    }\n</script>\n\n<svelte:window on:keydown={ (event)=>handleKey(event) }/>\n\n{#if visible}\n    <section transition:slide={transition} class={classes} style={style} on:selectstart={handleSelect}\n             on:mousedown={ (event)=>handleDragStart(event) } on:mouseup={ (event)=>handleDragEnd(event) }\n            on:touchstart={ (event)=>handleTouchStart(event) } on:touchmove={ (event)=>handleTouchEnd(event) }>\n        <div class=\"svelte-fp-container svelte-fp-flexbox-expand\" class:svelte-fp-flexbox-center={center}>\n            <slot>\n            </slot>\n        </div>\n        {#if slides[0]}\n            <div class=\"svelte-fp-indicator-horizontal\">\n                <ul class=\"svelte-fp-indicator-list-horizontal\">\n                    {#each slides as page,index}\n                        <li class=\"svelte-fp-indicator-list-item\">\n                            <button class=\"svelte-fp-indicator-list-item-btn {activeSlideIndicator === index ? 'svelte-fp-active':''}\" on:click={ ()=>toSlide(index) }></button>\n                        </li>\n                    {/each}\n                </ul>\n            </div>\n        {/if}\n    </section>\n{/if}\n\n<style>\n    section {\n        height: inherit;\n        position: relative;\n    }\n    .svelte-fp-flexbox-expand {\n        flex: 1;\n    }\n    .svelte-fp-container {\n        height: inherit;\n        width: inherit;\n        position: relative;\n    }\n    .svelte-fp-flexbox-center {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n    .svelte-fp-unselectable {\n        user-select: none;\n    }\n    .svelte-fp-indicator-horizontal {\n        width: inherit;\n        height: 5rem;\n        overflow: hidden;\n        position: absolute;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n    .svelte-fp-indicator-list-horizontal {\n        margin: 1rem;\n        padding: 1rem;\n        list-style-type: none;\n    }\n    .svelte-fp-indicator-list-item {\n        display: inline-block;\n        margin: 1rem;\n        padding: 0;\n    }\n    .svelte-fp-indicator-list-item-btn {\n        width: 1rem;\n        height: 1rem;\n        border-radius: 0.5rem;\n        border: solid 1px #767676;\n        background-color: transparent;\n    }\n    .svelte-fp-active {\n        background-color: #767676;\n    }\n</style>",
    "<script>\n    import {fly} from 'svelte/transition'\n    import {getContext, onMount} from \"svelte\";\n\n    let defaultClasses = '';\n    export { defaultClasses as class };\n    export let style = '';\n    let slideId = 0;\n    let activeSlide = 0;\n    const { activeSlideStore, getId } = getContext('slide')\n    export let center = false;\n    let visible;\n    export let transitionIn = {\n        duration: 500,\n        x: -2000\n    };\n    export let transitionOut = {\n        duration: 500,\n        x: 2000\n    };\n\n    const makePositive = (num) => {\n        let negative = false;\n        if (num < 0) {\n            negative = true;\n            num = -num;\n        }\n        return {num, negative};\n    };\n\n    const correctAnimation = (active) => {\n        const state = makePositive(active);\n        if (state.negative) {\n            transitionIn.x = 2000;\n            transitionOut.x = -2000;\n        } else {\n            transitionIn.x = -2000;\n            transitionOut.x = 2000;\n        }\n        activeSlide = state.num;\n    }\n\n    $: visible = slideId === activeSlide;\n    $: activeSlideStore.set(activeSlide)\n\n    $: correctAnimation($activeSlideStore)\n\n    onMount(()=>{\n        slideId = getId()\n    })\n</script>\n\n{#if slideId === activeSlide}\n    <div class={`${defaultClasses} svelte-fp-content`} style={style} in:fly={transitionIn} out:fly={transitionOut} class:svelte-fp-flexbox-center={center}>\n        <slot>\n        </slot>\n    </div>\n{/if}\n\n<style>\n    .svelte-fp-content {\n        height: inherit;\n        width: inherit;\n        position: absolute;\n        left: 0;\n        right: 0;\n        top: 0;\n        bottom: 0;\n    }\n    .svelte-fp-flexbox-center {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n</style>",
    "<script>\n    export let activeSection = 0;\n    export let index = 0;\n    export let name = '';\n    export let names = false;\n\n    const goto = () => {\n        activeSection = index;\n    }\n</script>\n\n<li class=\"svelte-fp-indicator-list-item\">\n    {#if names}\n        <p class=\"svelte-fp-slide-name\">\n            {name}\n        </p>\n    {/if}\n    <button class=\"svelte-fp-indicator-list-item-btn {activeSection === index ? 'svelte-fp-active':''}\" on:click={goto}>\n    </button>\n</li>\n\n<style>\n    .svelte-fp-indicator-list-item {\n        margin: 1rem;\n        padding: 0;\n        display: flex;\n        align-items: center;\n    }\n    .svelte-fp-indicator-list-item-btn {\n        width: 1rem;\n        height: 1rem;\n        border-radius: 0.5rem;\n        border: solid 1px #767676;\n        background-color: transparent;\n        order: 1;\n        align-self: end;\n    }\n    .svelte-fp-active {\n        background-color: #767676;\n    }\n    .svelte-fp-slide-name {\n        position: absolute;\n        text-align: center;\n        border: 1px #4e555b;\n        border-radius: 3px;\n        background: rgba(78, 85, 91, 0.82);\n        padding: 2px;\n        order: 0;\n        margin: 2rem;\n        justify-self: start;\n\n    }\n    .svelte-fp-indicator-list-item-btn:hover + .svelte-fp-slide-name {\n    }\n    @media only screen and (max-width: 600px){\n        .svelte-fp-indicator-list-item-btn {\n            width: 0.5rem;\n            height: 0.5rem;\n            border-radius: 0.25rem;\n        }\n    }\n</style>",
    "<script>\n    import Dot from './Dot.svelte';\n    export let sections = []\n    export let activeSection = 0;\n\n</script>\n\n<div class=\"svelte-fp-indicator\">\n    <ul class=\"svelte-fp-indicator-list\">\n        {#each sections as page,index}\n            <Dot bind:activeSection {index} name={page}/>\n        {/each}\n    </ul>\n</div>\n\n<style>\n    .svelte-fp-indicator {\n        height: inherit;\n        width: auto;\n        overflow: hidden;\n        position: absolute;\n        z-index: 100;\n        right: 0;\n        top: 0;\n        bottom: 0;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n    .svelte-fp-indicator-list {\n        margin: 1rem;\n        padding: 1rem;\n        list-style-type: none;\n    }\n    @media only screen and (max-width: 600px){\n        .svelte-fp-indicator {\n            width: 2rem;\n        }\n        .svelte-fp-indicator-list {\n            margin: 0.3rem;\n            padding: 0.3rem;\n        }\n    }\n</style>"
  ],
  "names": [],
  "mappings": "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"
}