.svelte-fp-wrapper.svelte-1lli8rw{height:100vh;overflow:hidden;left:0;right:0;top:0;bottom:0}.svelte-fp-container.svelte-1lli8rw{height:inherit;width:inherit;position:relative}.svelte-fp-indicator.svelte-1lli8rw{height:inherit;width:5rem;overflow:hidden;position:absolute;right:0;top:0;bottom:0;display:flex;justify-content:center;align-items:center}.svelte-fp-indicator-list.svelte-1lli8rw{margin:1rem;padding:1rem;list-style-type:none}.svelte-fp-indicator-list-item.svelte-1lli8rw{margin:1rem;padding:0}.svelte-fp-indicator-list-item-btn.svelte-1lli8rw{width:1rem;height:1rem;border-radius:0.5rem;border:solid 1px #767676;background-color:transparent}.svelte-fp-active.svelte-1lli8rw{background-color:#767676}@media only screen and (max-width: 600px){.svelte-fp-indicator.svelte-1lli8rw{display:none}}
section.svelte-l4liqa{height:inherit;position:relative}.svelte-fp-flexbox-expand.svelte-l4liqa{flex:1}.svelte-fp-container.svelte-l4liqa{height:inherit;width:inherit;position:relative}.svelte-fp-flexbox-center.svelte-l4liqa{display:flex;justify-content:center;align-items:center}.svelte-fp-unselectable.svelte-l4liqa{user-select:none}.svelte-fp-indicator-horizontal.svelte-l4liqa{width:inherit;height:5rem;overflow:hidden;position:absolute;left:0;right:0;bottom:0;display:flex;justify-content:center;align-items:center}.svelte-fp-indicator-list-horizontal.svelte-l4liqa{margin:1rem;padding:1rem;list-style-type:none}.svelte-fp-indicator-list-item.svelte-l4liqa{display:inline-block;margin:1rem;padding:0}.svelte-fp-indicator-list-item-btn.svelte-l4liqa{width:1rem;height:1rem;border-radius:0.5rem;border:solid 1px #767676;background-color:transparent}.svelte-fp-active.svelte-l4liqa{background-color:#767676}
.svelte-fp-content.svelte-1jzpibp{height:inherit;width:inherit;position:absolute;left:0;right:0;top:0;bottom:0}.svelte-fp-flexbox-center.svelte-1jzpibp{display:flex;justify-content:center;align-items:center}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */