import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, c as create_slot, v as validate_each_argument, a as validate_slots, e as element, b as space, f as claim_element, g as children, h as detach_dev, j as claim_space, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, o as listen_dev, p as null_to_empty, r as run_all, q as get_slot_context, t as get_slot_changes, u as transition_in, w as transition_out, x as destroy_each, y as toggle_class, z as add_render_callback, A as create_bidirectional_transition, B as noop, C as empty, D as group_outros, E as check_outros, F as create_in_transition, G as create_out_transition, H as assign, I as exclude_internal_props, J as set_attributes, K as get_spread_update, L as binding_callbacks, M as bind, N as create_component, O as query_selector_all, P as claim_component, Q as mount_component, R as add_flush_callback, T as destroy_component, U as text, V as claim_text } from './client.356e2a76.js';

/* node_modules/svelte-fullpage/src/Fullpage.svelte generated by Svelte v3.20.1 */

const file = "node_modules/svelte-fullpage/src/Fullpage.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[30] = list[i];
	child_ctx[32] = i;
	return child_ctx;
}

// (128:16) {#each sections as page,index}
function create_each_block(ctx) {
	let li;
	let button;
	let button_class_value;
	let t;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[24](/*index*/ ctx[32], ...args);
	}

	const block = {
		c: function create() {
			li = element("li");
			button = element("button");
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			button = claim_element(li_nodes, "BUTTON", { class: true });
			children(button).forEach(detach_dev);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", button_class_value = "svelte-fp-indicator-list-item-btn " + (/*activeSection*/ ctx[0] === /*index*/ ctx[32]
			? "svelte-fp-active"
			: "") + " svelte-1lli8rw");

			add_location(button, file, 129, 24, 4710);
			attr_dev(li, "class", "svelte-fp-indicator-list-item svelte-1lli8rw");
			add_location(li, file, 128, 20, 4643);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, li, anchor);
			append_dev(li, button);
			append_dev(li, t);
			if (remount) dispose();
			dispose = listen_dev(button, "click", click_handler, false, false, false);
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*activeSection*/ 1 && button_class_value !== (button_class_value = "svelte-fp-indicator-list-item-btn " + (/*activeSection*/ ctx[0] === /*index*/ ctx[32]
			? "svelte-fp-active"
			: "") + " svelte-1lli8rw")) {
				attr_dev(button, "class", button_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(128:16) {#each sections as page,index}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div2;
	let div1;
	let t;
	let div0;
	let ul;
	let div2_class_value;
	let current;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[22].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);
	let each_value = /*sections*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div2 = element("div");
			div1 = element("div");
			if (default_slot) default_slot.c();
			t = space();
			div0 = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true, style: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (default_slot) default_slot.l(div1_nodes);
			t = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			ul = claim_element(div0_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "svelte-fp-indicator-list svelte-1lli8rw");
			add_location(ul, file, 126, 12, 4538);
			attr_dev(div0, "class", "svelte-fp-indicator svelte-1lli8rw");
			add_location(div0, file, 125, 8, 4492);
			attr_dev(div1, "class", "svelte-fp-container svelte-1lli8rw");
			add_location(div1, file, 123, 4, 4433);
			attr_dev(div2, "class", div2_class_value = "" + (null_to_empty(/*classes*/ ctx[3]) + " svelte-1lli8rw"));
			attr_dev(div2, "style", /*style*/ ctx[1]);
			add_location(div2, file, 121, 0, 4119);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append_dev(div1, t);
			append_dev(div1, div0);
			append_dev(div0, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(window, "keydown", /*keydown_handler*/ ctx[23], false, false, false),
				listen_dev(div2, "wheel", /*wheel_handler*/ ctx[25], false, false, false),
				listen_dev(div2, "touchstart", /*touchstart_handler*/ ctx[26], false, false, false),
				listen_dev(div2, "touchmove", /*touchmove_handler*/ ctx[27], false, false, false),
				listen_dev(div2, "drag", drag_handler, false, false, false),
				listen_dev(div2, "mousedown", /*mousedown_handler*/ ctx[28], false, false, false),
				listen_dev(div2, "mouseup", /*mouseup_handler*/ ctx[29], false, false, false)
			];
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope*/ 2097152) {
					default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[21], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[21], dirty, null));
				}
			}

			if (dirty[0] & /*activeSection, sections*/ 5) {
				each_value = /*sections*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (!current || dirty[0] & /*style*/ 2) {
				attr_dev(div2, "style", /*style*/ ctx[1]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if (default_slot) default_slot.d(detaching);
			destroy_each(each_blocks, detaching);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const drag_handler = () => {
	return false;
};

function instance($$self, $$props, $$invalidate) {
	let { class: defaultClasses = "" } = $$props;
	let { style = "" } = $$props;
	let { activeSection = 0 } = $$props;
	let { sections = [] } = $$props;
	let { transitionDuration = 500 } = $$props;
	let { arrows = false } = $$props;
	let { drag = false } = $$props;
	let dragStartPosition;
	let touchStartPosition;

	//extending exported classes with wrapper class
	let classes = `${defaultClasses} svelte-fp-wrapper`;

	let recentScroll = 0;

	//setting section visible
	let active = true;

	//function that handles scroll and sets scroll cooldown based on animation duration
	const handleScroll = event => {
		//getting direction of scroll, if negative, scroll up, if positive, scroll down
		let deltaY = event.deltaY;

		let timer = new Date().getTime();

		//if cooldown time is up, fullpage is scrollable again
		if (transitionDuration < timer - recentScroll) {
			recentScroll = timer;

			if (deltaY < 0) {
				scrollUp();
			} else if (deltaY > 0) {
				scrollDown();
			}
		}
	};

	//function that toggles visibility of active section
	const toggleActive = () => {
		active = !active;
	};

	//function that makes scroll up effect
	const scrollUp = async () => {
		// TODO: somehow fix animation
		if (activeSection > 0) {
			$$invalidate(0, activeSection--, activeSection);
		}
	};

	//function that makes scroll down effect
	const scrollDown = async () => {
		// TODO: somehow fix animation
		if (activeSection < sections.length - 1) {
			$$invalidate(0, activeSection++, activeSection);
		}
	};

	//function that handles arrow event
	const handleKey = event => {
		if (arrows) {
			switch (event.key) {
				case "ArrowDown":
					scrollDown();
					break;
				case "ArrowUp":
					scrollUp();
					break;
			}
		}
	};

	//function that handles drag start event
	const handleDragStart = event => {
		if (drag) {
			dragStartPosition = event.screenY;
		}
	}; //event.preventDefault();

	//function that handles drag end event
	const handleDragEnd = event => {
		if (drag) {
			const dragEndPosition = event.screenY;

			//console.log(`Start:${dragStartPosition}, End:${dragEndPosition}, vertical difference:${dragStartPosition-dragEndPosition}`);
			if (dragStartPosition - dragEndPosition > 100) {
				scrollDown();
			} else if (dragStartPosition - dragEndPosition < -100) {
				scrollUp();
			}
		}
	}; //event.preventDefault();

	//function that handles touch event
	const handleTouchStart = event => {
		//event.preventDefault();
		touchStartPosition = event.touches[0].screenY;
	};

	const handleTouchEnd = event => {
		//event.preventDefault();
		let timer = new Date().getTime();

		const touchEndPosition = event.touches[0].screenY;

		if (transitionDuration < timer - recentScroll) {
			if (touchStartPosition - touchEndPosition > 100) {
				scrollDown();
				recentScroll = timer;
			} else if (touchStartPosition - touchEndPosition < -100) {
				scrollUp();
				recentScroll = timer;
			}
		}
	};

	const writable_props = [
		"class",
		"style",
		"activeSection",
		"sections",
		"transitionDuration",
		"arrows",
		"drag"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Fullpage> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Fullpage", $$slots, ['default']);
	const keydown_handler = event => handleKey(event);
	const click_handler = index => $$invalidate(0, activeSection = index);
	const wheel_handler = event => handleScroll(event);
	const touchstart_handler = event => handleTouchStart(event);
	const touchmove_handler = event => handleTouchEnd(event);
	const mousedown_handler = event => handleDragStart(event);
	const mouseup_handler = event => handleDragEnd(event);

	$$self.$set = $$props => {
		if ("class" in $$props) $$invalidate(10, defaultClasses = $$props.class);
		if ("style" in $$props) $$invalidate(1, style = $$props.style);
		if ("activeSection" in $$props) $$invalidate(0, activeSection = $$props.activeSection);
		if ("sections" in $$props) $$invalidate(2, sections = $$props.sections);
		if ("transitionDuration" in $$props) $$invalidate(11, transitionDuration = $$props.transitionDuration);
		if ("arrows" in $$props) $$invalidate(12, arrows = $$props.arrows);
		if ("drag" in $$props) $$invalidate(13, drag = $$props.drag);
		if ("$$scope" in $$props) $$invalidate(21, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		defaultClasses,
		style,
		activeSection,
		sections,
		transitionDuration,
		arrows,
		drag,
		dragStartPosition,
		touchStartPosition,
		classes,
		recentScroll,
		active,
		handleScroll,
		toggleActive,
		scrollUp,
		scrollDown,
		handleKey,
		handleDragStart,
		handleDragEnd,
		handleTouchStart,
		handleTouchEnd
	});

	$$self.$inject_state = $$props => {
		if ("defaultClasses" in $$props) $$invalidate(10, defaultClasses = $$props.defaultClasses);
		if ("style" in $$props) $$invalidate(1, style = $$props.style);
		if ("activeSection" in $$props) $$invalidate(0, activeSection = $$props.activeSection);
		if ("sections" in $$props) $$invalidate(2, sections = $$props.sections);
		if ("transitionDuration" in $$props) $$invalidate(11, transitionDuration = $$props.transitionDuration);
		if ("arrows" in $$props) $$invalidate(12, arrows = $$props.arrows);
		if ("drag" in $$props) $$invalidate(13, drag = $$props.drag);
		if ("dragStartPosition" in $$props) dragStartPosition = $$props.dragStartPosition;
		if ("touchStartPosition" in $$props) touchStartPosition = $$props.touchStartPosition;
		if ("classes" in $$props) $$invalidate(3, classes = $$props.classes);
		if ("recentScroll" in $$props) recentScroll = $$props.recentScroll;
		if ("active" in $$props) active = $$props.active;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		activeSection,
		style,
		sections,
		classes,
		handleScroll,
		handleKey,
		handleDragStart,
		handleDragEnd,
		handleTouchStart,
		handleTouchEnd,
		defaultClasses,
		transitionDuration,
		arrows,
		drag,
		dragStartPosition,
		touchStartPosition,
		recentScroll,
		active,
		toggleActive,
		scrollUp,
		scrollDown,
		$$scope,
		$$slots,
		keydown_handler,
		click_handler,
		wheel_handler,
		touchstart_handler,
		touchmove_handler,
		mousedown_handler,
		mouseup_handler
	];
}

class Fullpage extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				class: 10,
				style: 1,
				activeSection: 0,
				sections: 2,
				transitionDuration: 11,
				arrows: 12,
				drag: 13
			},
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Fullpage",
			options,
			id: create_fragment.name
		});
	}

	get class() {
		throw new Error("<Fullpage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Fullpage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Fullpage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Fullpage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get activeSection() {
		throw new Error("<Fullpage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set activeSection(value) {
		throw new Error("<Fullpage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get sections() {
		throw new Error("<Fullpage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sections(value) {
		throw new Error("<Fullpage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get transitionDuration() {
		throw new Error("<Fullpage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set transitionDuration(value) {
		throw new Error("<Fullpage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get arrows() {
		throw new Error("<Fullpage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set arrows(value) {
		throw new Error("<Fullpage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get drag() {
		throw new Error("<Fullpage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set drag(value) {
		throw new Error("<Fullpage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}

function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 }) {
    const style = getComputedStyle(node);
    const target_opacity = +style.opacity;
    const transform = style.transform === 'none' ? '' : style.transform;
    const od = target_opacity * (1 - opacity);
    return {
        delay,
        duration,
        easing,
        css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
    };
}
function slide(node, { delay = 0, duration = 400, easing = cubicOut }) {
    const style = getComputedStyle(node);
    const opacity = +style.opacity;
    const height = parseFloat(style.height);
    const padding_top = parseFloat(style.paddingTop);
    const padding_bottom = parseFloat(style.paddingBottom);
    const margin_top = parseFloat(style.marginTop);
    const margin_bottom = parseFloat(style.marginBottom);
    const border_top_width = parseFloat(style.borderTopWidth);
    const border_bottom_width = parseFloat(style.borderBottomWidth);
    return {
        delay,
        duration,
        easing,
        css: t => `overflow: hidden;` +
            `opacity: ${Math.min(t * 20, 1) * opacity};` +
            `height: ${t * height}px;` +
            `padding-top: ${t * padding_top}px;` +
            `padding-bottom: ${t * padding_bottom}px;` +
            `margin-top: ${t * margin_top}px;` +
            `margin-bottom: ${t * margin_bottom}px;` +
            `border-top-width: ${t * border_top_width}px;` +
            `border-bottom-width: ${t * border_bottom_width}px;`
    };
}

/* node_modules/svelte-fullpage/src/FullpageSection.svelte generated by Svelte v3.20.1 */
const file$1 = "node_modules/svelte-fullpage/src/FullpageSection.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[31] = list[i];
	child_ctx[33] = i;
	return child_ctx;
}

// (106:0) {#if sectionId === activeSection}
function create_if_block(ctx) {
	let section;
	let div;
	let t;
	let section_class_value;
	let section_transition;
	let current;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[24].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[23], null);
	const default_slot_or_fallback = default_slot || fallback_block(ctx);
	let if_block = /*slides*/ ctx[4][0] && create_if_block_1(ctx);

	const block = {
		c: function create() {
			section = element("section");
			div = element("div");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true, style: true });
			var section_nodes = children(section);
			div = claim_element(section_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (default_slot_or_fallback) default_slot_or_fallback.l(div_nodes);
			div_nodes.forEach(detach_dev);
			t = claim_space(section_nodes);
			if (if_block) if_block.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "svelte-fp-container svelte-fp-flexbox-expand svelte-l4liqa");
			toggle_class(div, "svelte-fp-flexbox-center", /*center*/ ctx[5]);
			add_location(div, file$1, 109, 8, 3229);
			attr_dev(section, "class", section_class_value = "" + (null_to_empty(/*classes*/ ctx[7]) + " svelte-l4liqa"));
			attr_dev(section, "style", /*style*/ ctx[2]);
			add_location(section, file$1, 106, 4, 2903);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, section, anchor);
			append_dev(section, div);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(div, null);
			}

			append_dev(section, t);
			if (if_block) if_block.m(section, null);
			current = true;
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(section, "selectstart", /*handleSelect*/ ctx[8], false, false, false),
				listen_dev(section, "mousedown", /*mousedown_handler*/ ctx[27], false, false, false),
				listen_dev(section, "mouseup", /*mouseup_handler*/ ctx[28], false, false, false),
				listen_dev(section, "touchstart", /*touchstart_handler*/ ctx[29], false, false, false),
				listen_dev(section, "touchmove", /*touchmove_handler*/ ctx[30], false, false, false)
			];
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope*/ 8388608) {
					default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[23], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[23], dirty, null));
				}
			}

			if (dirty[0] & /*center*/ 32) {
				toggle_class(div, "svelte-fp-flexbox-center", /*center*/ ctx[5]);
			}

			if (/*slides*/ ctx[4][0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(section, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (!current || dirty[0] & /*classes*/ 128 && section_class_value !== (section_class_value = "" + (null_to_empty(/*classes*/ ctx[7]) + " svelte-l4liqa"))) {
				attr_dev(section, "class", section_class_value);
			}

			if (!current || dirty[0] & /*style*/ 4) {
				attr_dev(section, "style", /*style*/ ctx[2]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);

			add_render_callback(() => {
				if (!section_transition) section_transition = create_bidirectional_transition(section, slide, /*transition*/ ctx[6], true);
				section_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			if (!section_transition) section_transition = create_bidirectional_transition(section, slide, /*transition*/ ctx[6], false);
			section_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			if (if_block) if_block.d();
			if (detaching && section_transition) section_transition.end();
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(106:0) {#if sectionId === activeSection}",
		ctx
	});

	return block;
}

// (111:18)              
function fallback_block(ctx) {
	const block = { c: noop, l: noop, m: noop, d: noop };

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block.name,
		type: "fallback",
		source: "(111:18)              ",
		ctx
	});

	return block;
}

// (114:8) {#if slides[0]}
function create_if_block_1(ctx) {
	let div;
	let ul;
	let each_value = /*slides*/ ctx[4];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			ul = claim_element(div_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "svelte-fp-indicator-list-horizontal svelte-l4liqa");
			add_location(ul, file$1, 115, 16, 3479);
			attr_dev(div, "class", "svelte-fp-indicator-horizontal svelte-l4liqa");
			add_location(div, file$1, 114, 12, 3418);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*activeSlide, slides*/ 18) {
				each_value = /*slides*/ ctx[4];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(114:8) {#if slides[0]}",
		ctx
	});

	return block;
}

// (117:20) {#each slides as page,index}
function create_each_block$1(ctx) {
	let li;
	let button;
	let button_class_value;
	let t;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[26](/*index*/ ctx[33], ...args);
	}

	const block = {
		c: function create() {
			li = element("li");
			button = element("button");
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			button = claim_element(li_nodes, "BUTTON", { class: true });
			children(button).forEach(detach_dev);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", button_class_value = "svelte-fp-indicator-list-item-btn " + (/*activeSlide*/ ctx[1] === /*index*/ ctx[33]
			? "svelte-fp-active"
			: "") + " svelte-l4liqa");

			add_location(button, file$1, 118, 28, 3672);
			attr_dev(li, "class", "svelte-fp-indicator-list-item svelte-l4liqa");
			add_location(li, file$1, 117, 24, 3601);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, li, anchor);
			append_dev(li, button);
			append_dev(li, t);
			if (remount) dispose();
			dispose = listen_dev(button, "click", click_handler, false, false, false);
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*activeSlide*/ 2 && button_class_value !== (button_class_value = "svelte-fp-indicator-list-item-btn " + (/*activeSlide*/ ctx[1] === /*index*/ ctx[33]
			? "svelte-fp-active"
			: "") + " svelte-l4liqa")) {
				attr_dev(button, "class", button_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(117:20) {#each slides as page,index}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let if_block_anchor;
	let current;
	let dispose;
	let if_block = /*sectionId*/ ctx[0] === /*activeSection*/ ctx[3] && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor, remount) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
			if (remount) dispose();
			dispose = listen_dev(window, "keydown", /*keydown_handler*/ ctx[25], false, false, false);
		},
		p: function update(ctx, dirty) {
			if (/*sectionId*/ ctx[0] === /*activeSection*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { class: defaultClasses = "" } = $$props;
	let { style = "" } = $$props;
	let { sectionId } = $$props;
	let { activeSection } = $$props;
	let { slides = [] } = $$props;
	let { activeSlide = false } = $$props;
	let { center = false } = $$props;
	let { arrows = false } = $$props;
	let { select = false } = $$props;
	let { transitionDuration = 500 } = $$props;
	let { transition = { duration: transitionDuration } } = $$props;
	sectionId = parseInt(sectionId);
	let dragStartPosition;
	let touchStartPosition;
	let recentSlide = 0;
	let classes = `${defaultClasses} svelte-fp-section svelte-fp-flexbox-center`;

	if (!select) {
		classes = `${classes} svelte-fp-unselectable`;
	}

	const handleSelect = () => {
		if (!select) {
			return false;
		}
	};

	const slideRight = () => {
		if (activeSlide < slides.length - 1) {
			$$invalidate(1, activeSlide++, activeSlide);
		} else {
			$$invalidate(1, activeSlide = 0);
		}
	};

	const slideLeft = () => {
		if (activeSlide > 0) {
			$$invalidate(1, activeSlide--, activeSlide);
		} else {
			$$invalidate(1, activeSlide = slides.length - 1);
		}
	};

	//function that handles arrow event
	const handleKey = event => {
		if (arrows) {
			switch (event.key) {
				case "ArrowLeft":
					slideLeft();
					break;
				case "ArrowRight":
					slideRight();
					break;
			}
		}
	};

	//function that handles drag start event
	const handleDragStart = event => {
		dragStartPosition = event.screenX;
	};

	//function that handles drag end event
	const handleDragEnd = event => {
		const dragEndPosition = event.screenX;

		if (dragStartPosition - dragEndPosition > 100) {
			slideRight();
		} else if (dragStartPosition - dragEndPosition < -100) {
			slideLeft();
		}
	};

	//function that handles touch event
	const handleTouchStart = event => {
		//event.preventDefault();
		touchStartPosition = event.touches[0].screenX;
	};

	const handleTouchEnd = event => {
		//event.preventDefault();
		let timer = new Date().getTime();

		const touchEndPosition = event.touches[0].screenX;

		if (transitionDuration < timer - recentSlide) {
			if (touchStartPosition - touchEndPosition > 100) {
				slideRight();
				recentSlide = timer;
			} else if (touchStartPosition - touchEndPosition < -100) {
				slideLeft();
				recentSlide = timer;
			}
		}
	};

	const writable_props = [
		"class",
		"style",
		"sectionId",
		"activeSection",
		"slides",
		"activeSlide",
		"center",
		"arrows",
		"select",
		"transitionDuration",
		"transition"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<FullpageSection> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FullpageSection", $$slots, ['default']);
	const keydown_handler = event => handleKey(event);
	const click_handler = index => $$invalidate(1, activeSlide = index);
	const mousedown_handler = event => handleDragStart(event);
	const mouseup_handler = event => handleDragEnd(event);
	const touchstart_handler = event => handleTouchStart(event);
	const touchmove_handler = event => handleTouchEnd(event);

	$$self.$set = $$props => {
		if ("class" in $$props) $$invalidate(14, defaultClasses = $$props.class);
		if ("style" in $$props) $$invalidate(2, style = $$props.style);
		if ("sectionId" in $$props) $$invalidate(0, sectionId = $$props.sectionId);
		if ("activeSection" in $$props) $$invalidate(3, activeSection = $$props.activeSection);
		if ("slides" in $$props) $$invalidate(4, slides = $$props.slides);
		if ("activeSlide" in $$props) $$invalidate(1, activeSlide = $$props.activeSlide);
		if ("center" in $$props) $$invalidate(5, center = $$props.center);
		if ("arrows" in $$props) $$invalidate(15, arrows = $$props.arrows);
		if ("select" in $$props) $$invalidate(16, select = $$props.select);
		if ("transitionDuration" in $$props) $$invalidate(17, transitionDuration = $$props.transitionDuration);
		if ("transition" in $$props) $$invalidate(6, transition = $$props.transition);
		if ("$$scope" in $$props) $$invalidate(23, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		slide,
		defaultClasses,
		style,
		sectionId,
		activeSection,
		slides,
		activeSlide,
		center,
		arrows,
		select,
		transitionDuration,
		transition,
		dragStartPosition,
		touchStartPosition,
		recentSlide,
		classes,
		handleSelect,
		slideRight,
		slideLeft,
		handleKey,
		handleDragStart,
		handleDragEnd,
		handleTouchStart,
		handleTouchEnd
	});

	$$self.$inject_state = $$props => {
		if ("defaultClasses" in $$props) $$invalidate(14, defaultClasses = $$props.defaultClasses);
		if ("style" in $$props) $$invalidate(2, style = $$props.style);
		if ("sectionId" in $$props) $$invalidate(0, sectionId = $$props.sectionId);
		if ("activeSection" in $$props) $$invalidate(3, activeSection = $$props.activeSection);
		if ("slides" in $$props) $$invalidate(4, slides = $$props.slides);
		if ("activeSlide" in $$props) $$invalidate(1, activeSlide = $$props.activeSlide);
		if ("center" in $$props) $$invalidate(5, center = $$props.center);
		if ("arrows" in $$props) $$invalidate(15, arrows = $$props.arrows);
		if ("select" in $$props) $$invalidate(16, select = $$props.select);
		if ("transitionDuration" in $$props) $$invalidate(17, transitionDuration = $$props.transitionDuration);
		if ("transition" in $$props) $$invalidate(6, transition = $$props.transition);
		if ("dragStartPosition" in $$props) dragStartPosition = $$props.dragStartPosition;
		if ("touchStartPosition" in $$props) touchStartPosition = $$props.touchStartPosition;
		if ("recentSlide" in $$props) recentSlide = $$props.recentSlide;
		if ("classes" in $$props) $$invalidate(7, classes = $$props.classes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		sectionId,
		activeSlide,
		style,
		activeSection,
		slides,
		center,
		transition,
		classes,
		handleSelect,
		handleKey,
		handleDragStart,
		handleDragEnd,
		handleTouchStart,
		handleTouchEnd,
		defaultClasses,
		arrows,
		select,
		transitionDuration,
		dragStartPosition,
		touchStartPosition,
		recentSlide,
		slideRight,
		slideLeft,
		$$scope,
		$$slots,
		keydown_handler,
		click_handler,
		mousedown_handler,
		mouseup_handler,
		touchstart_handler,
		touchmove_handler
	];
}

class FullpageSection extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$1,
			create_fragment$1,
			safe_not_equal,
			{
				class: 14,
				style: 2,
				sectionId: 0,
				activeSection: 3,
				slides: 4,
				activeSlide: 1,
				center: 5,
				arrows: 15,
				select: 16,
				transitionDuration: 17,
				transition: 6
			},
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FullpageSection",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*sectionId*/ ctx[0] === undefined && !("sectionId" in props)) {
			console.warn("<FullpageSection> was created without expected prop 'sectionId'");
		}

		if (/*activeSection*/ ctx[3] === undefined && !("activeSection" in props)) {
			console.warn("<FullpageSection> was created without expected prop 'activeSection'");
		}
	}

	get class() {
		throw new Error("<FullpageSection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<FullpageSection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<FullpageSection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<FullpageSection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get sectionId() {
		throw new Error("<FullpageSection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sectionId(value) {
		throw new Error("<FullpageSection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get activeSection() {
		throw new Error("<FullpageSection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set activeSection(value) {
		throw new Error("<FullpageSection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get slides() {
		throw new Error("<FullpageSection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set slides(value) {
		throw new Error("<FullpageSection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get activeSlide() {
		throw new Error("<FullpageSection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set activeSlide(value) {
		throw new Error("<FullpageSection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get center() {
		throw new Error("<FullpageSection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set center(value) {
		throw new Error("<FullpageSection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get arrows() {
		throw new Error("<FullpageSection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set arrows(value) {
		throw new Error("<FullpageSection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get select() {
		throw new Error("<FullpageSection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set select(value) {
		throw new Error("<FullpageSection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get transitionDuration() {
		throw new Error("<FullpageSection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set transitionDuration(value) {
		throw new Error("<FullpageSection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get transition() {
		throw new Error("<FullpageSection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set transition(value) {
		throw new Error("<FullpageSection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/svelte-fullpage/src/FullpageSlide.svelte generated by Svelte v3.20.1 */
const file$2 = "node_modules/svelte-fullpage/src/FullpageSlide.svelte";

// (22:0) {#if slideId === activeSlide}
function create_if_block$1(ctx) {
	let div;
	let div_class_value;
	let div_intro;
	let div_outro;
	let current;
	const default_slot_template = /*$$slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	const default_slot_or_fallback = default_slot || fallback_block$1(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			if (default_slot_or_fallback) default_slot_or_fallback.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", div_class_value = "" + (null_to_empty(`${/*defaultClasses*/ ctx[1]} svelte-fp-content`) + " svelte-1jzpibp"));
			attr_dev(div, "style", /*style*/ ctx[2]);
			toggle_class(div, "svelte-fp-flexbox-center", /*center*/ ctx[4]);
			add_location(div, file$2, 22, 4, 466);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[7], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null));
				}
			}

			if (!current || dirty & /*defaultClasses*/ 2 && div_class_value !== (div_class_value = "" + (null_to_empty(`${/*defaultClasses*/ ctx[1]} svelte-fp-content`) + " svelte-1jzpibp"))) {
				attr_dev(div, "class", div_class_value);
			}

			if (!current || dirty & /*style*/ 4) {
				attr_dev(div, "style", /*style*/ ctx[2]);
			}

			if (dirty & /*defaultClasses, center*/ 18) {
				toggle_class(div, "svelte-fp-flexbox-center", /*center*/ ctx[4]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);
				if (!div_intro) div_intro = create_in_transition(div, fly, /*transitionIn*/ ctx[5]);
				div_intro.start();
			});

			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			if (div_intro) div_intro.invalidate();
			div_outro = create_out_transition(div, fly, /*transitionOut*/ ctx[6]);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			if (detaching && div_outro) div_outro.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(22:0) {#if slideId === activeSlide}",
		ctx
	});

	return block;
}

// (24:14)          
function fallback_block$1(ctx) {
	const block = { c: noop, l: noop, m: noop, d: noop };

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$1.name,
		type: "fallback",
		source: "(24:14)          ",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*slideId*/ ctx[0] === /*activeSlide*/ ctx[3] && create_if_block$1(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*slideId*/ ctx[0] === /*activeSlide*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { class: defaultClasses = "" } = $$props;
	let { style = "" } = $$props;
	let { slideId } = $$props;
	let { activeSlide } = $$props;
	let { center = false } = $$props;
	let { transitionIn = { duration: 250, x: -200 } } = $$props;
	let { transitionOut = { duration: 250, x: 200 } } = $$props;
	slideId = parseInt(slideId);

	const writable_props = [
		"class",
		"style",
		"slideId",
		"activeSlide",
		"center",
		"transitionIn",
		"transitionOut"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<FullpageSlide> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FullpageSlide", $$slots, ['default']);

	$$self.$set = $$props => {
		if ("class" in $$props) $$invalidate(1, defaultClasses = $$props.class);
		if ("style" in $$props) $$invalidate(2, style = $$props.style);
		if ("slideId" in $$props) $$invalidate(0, slideId = $$props.slideId);
		if ("activeSlide" in $$props) $$invalidate(3, activeSlide = $$props.activeSlide);
		if ("center" in $$props) $$invalidate(4, center = $$props.center);
		if ("transitionIn" in $$props) $$invalidate(5, transitionIn = $$props.transitionIn);
		if ("transitionOut" in $$props) $$invalidate(6, transitionOut = $$props.transitionOut);
		if ("$$scope" in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		fly,
		defaultClasses,
		style,
		slideId,
		activeSlide,
		center,
		transitionIn,
		transitionOut
	});

	$$self.$inject_state = $$props => {
		if ("defaultClasses" in $$props) $$invalidate(1, defaultClasses = $$props.defaultClasses);
		if ("style" in $$props) $$invalidate(2, style = $$props.style);
		if ("slideId" in $$props) $$invalidate(0, slideId = $$props.slideId);
		if ("activeSlide" in $$props) $$invalidate(3, activeSlide = $$props.activeSlide);
		if ("center" in $$props) $$invalidate(4, center = $$props.center);
		if ("transitionIn" in $$props) $$invalidate(5, transitionIn = $$props.transitionIn);
		if ("transitionOut" in $$props) $$invalidate(6, transitionOut = $$props.transitionOut);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		slideId,
		defaultClasses,
		style,
		activeSlide,
		center,
		transitionIn,
		transitionOut,
		$$scope,
		$$slots
	];
}

class FullpageSlide extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			class: 1,
			style: 2,
			slideId: 0,
			activeSlide: 3,
			center: 4,
			transitionIn: 5,
			transitionOut: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FullpageSlide",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*slideId*/ ctx[0] === undefined && !("slideId" in props)) {
			console.warn("<FullpageSlide> was created without expected prop 'slideId'");
		}

		if (/*activeSlide*/ ctx[3] === undefined && !("activeSlide" in props)) {
			console.warn("<FullpageSlide> was created without expected prop 'activeSlide'");
		}
	}

	get class() {
		throw new Error("<FullpageSlide>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<FullpageSlide>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<FullpageSlide>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<FullpageSlide>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get slideId() {
		throw new Error("<FullpageSlide>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set slideId(value) {
		throw new Error("<FullpageSlide>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get activeSlide() {
		throw new Error("<FullpageSlide>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set activeSlide(value) {
		throw new Error("<FullpageSlide>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get center() {
		throw new Error("<FullpageSlide>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set center(value) {
		throw new Error("<FullpageSlide>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get transitionIn() {
		throw new Error("<FullpageSlide>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set transitionIn(value) {
		throw new Error("<FullpageSlide>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get transitionOut() {
		throw new Error("<FullpageSlide>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set transitionOut(value) {
		throw new Error("<FullpageSlide>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

function toVal(mix) {
	var k, y, str='';
	if (mix) {
		if (typeof mix === 'object') {
			if (Array.isArray(mix)) {
				for (k=0; k < mix.length; k++) {
					if (mix[k] && (y = toVal(mix[k]))) {
						str && (str += ' ');
						str += y;
					}
				}
			} else {
				for (k in mix) {
					if (mix[k] && (y = toVal(k))) {
						str && (str += ' ');
						str += y;
					}
				}
			}
		} else if (typeof mix !== 'boolean' && !mix.call) {
			str && (str += ' ');
			str += mix;
		}
	}
	return str;
}

function clsx () {
	var i=0, x, str='';
	while (i < arguments.length) {
		if (x = toVal(arguments[i++])) {
			str && (str += ' ');
			str += x;
		}
	}
	return str;
}

function isObject(value) {
  const type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

function getColumnSizeClass(isXs, colWidth, colSize) {
  if (colSize === true || colSize === '') {
    return isXs ? 'col' : `col-${colWidth}`;
  } else if (colSize === 'auto') {
    return isXs ? 'col-auto' : `col-${colWidth}-auto`;
  }

  return isXs ? `col-${colSize}` : `col-${colWidth}-${colSize}`;
}

function clean($$props) {
  const rest = {};
  for (const key of Object.keys($$props)) {
    if (key !== "children" && key !== "$$scope" && key !== "$$slots") {
      rest[key] = $$props[key];
    }
  }
  return rest;
}

/* node_modules/sveltestrap/src/Container.svelte generated by Svelte v3.20.1 */
const file$3 = "node_modules/sveltestrap/src/Container.svelte";

function create_fragment$3(ctx) {
	let div;
	let current;
	const default_slot_template = /*$$slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
	let div_levels = [/*props*/ ctx[2], { id: /*id*/ ctx[0] }, { class: /*classes*/ ctx[1] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			add_location(div, file$3, 14, 0, 295);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[6], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null));
				}
			}

			set_attributes(div, get_spread_update(div_levels, [
				dirty & /*props*/ 4 && /*props*/ ctx[2],
				dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
				dirty & /*classes*/ 2 && { class: /*classes*/ ctx[1] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	let { fluid = false } = $$props;
	let { id = "" } = $$props;
	const props = clean($$props);
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Container", $$slots, ['default']);

	$$self.$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(3, className = $$new_props.class);
		if ("fluid" in $$new_props) $$invalidate(4, fluid = $$new_props.fluid);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("$$scope" in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		clsx,
		clean,
		className,
		fluid,
		id,
		props,
		classes
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(3, className = $$new_props.className);
		if ("fluid" in $$props) $$invalidate(4, fluid = $$new_props.fluid);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("classes" in $$props) $$invalidate(1, classes = $$new_props.classes);
	};

	let classes;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className, fluid*/ 24) {
			 $$invalidate(1, classes = clsx(className, fluid ? "container-fluid" : "container"));
		}
	};

	$$props = exclude_internal_props($$props);
	return [id, classes, props, className, fluid, $$props, $$scope, $$slots];
}

class Container extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { class: 3, fluid: 4, id: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Container",
			options,
			id: create_fragment$3.name
		});
	}

	get class() {
		throw new Error("<Container>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Container>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get fluid() {
		throw new Error("<Container>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set fluid(value) {
		throw new Error("<Container>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Container>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Container>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/Row.svelte generated by Svelte v3.20.1 */
const file$4 = "node_modules/sveltestrap/src/Row.svelte";

function create_fragment$4(ctx) {
	let div;
	let current;
	const default_slot_template = /*$$slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	let div_levels = [/*props*/ ctx[2], { id: /*id*/ ctx[0] }, { class: /*classes*/ ctx[1] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			add_location(div, file$4, 19, 0, 361);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[7], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null));
				}
			}

			set_attributes(div, get_spread_update(div_levels, [
				dirty & /*props*/ 4 && /*props*/ ctx[2],
				dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
				dirty & /*classes*/ 2 && { class: /*classes*/ ctx[1] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	let { noGutters = false } = $$props;
	let { form = false } = $$props;
	let { id = "" } = $$props;
	const props = clean($$props);
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Row", $$slots, ['default']);

	$$self.$set = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(3, className = $$new_props.class);
		if ("noGutters" in $$new_props) $$invalidate(4, noGutters = $$new_props.noGutters);
		if ("form" in $$new_props) $$invalidate(5, form = $$new_props.form);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		clsx,
		clean,
		className,
		noGutters,
		form,
		id,
		props,
		classes
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(3, className = $$new_props.className);
		if ("noGutters" in $$props) $$invalidate(4, noGutters = $$new_props.noGutters);
		if ("form" in $$props) $$invalidate(5, form = $$new_props.form);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("classes" in $$props) $$invalidate(1, classes = $$new_props.classes);
	};

	let classes;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className, noGutters, form*/ 56) {
			 $$invalidate(1, classes = clsx(className, noGutters ? "no-gutters" : null, form ? "form-row" : "row"));
		}
	};

	$$props = exclude_internal_props($$props);
	return [id, classes, props, className, noGutters, form, $$props, $$scope, $$slots];
}

class Row extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, { class: 3, noGutters: 4, form: 5, id: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Row",
			options,
			id: create_fragment$4.name
		});
	}

	get class() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get noGutters() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set noGutters(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get form() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set form(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/Col.svelte generated by Svelte v3.20.1 */
const file$5 = "node_modules/sveltestrap/src/Col.svelte";

function create_fragment$5(ctx) {
	let div;
	let current;
	const default_slot_template = /*$$slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	let div_levels = [
		/*props*/ ctx[1],
		{ id: /*id*/ ctx[0] },
		{ class: /*colClasses*/ ctx[2].join(" ") }
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			add_location(div, file$5, 51, 0, 1305);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[6], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null));
				}
			}

			set_attributes(div, get_spread_update(div_levels, [
				dirty & /*props*/ 2 && /*props*/ ctx[1],
				dirty & /*id*/ 1 && { id: /*id*/ ctx[0] },
				dirty & /*colClasses*/ 4 && { class: /*colClasses*/ ctx[2].join(" ") }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	let { id = "" } = $$props;
	const props = clean($$props);
	const colClasses = [];
	const widths = ["xs", "sm", "md", "lg", "xl"];

	widths.forEach(colWidth => {
		const columnProp = $$props[colWidth];

		if (!columnProp && columnProp !== "") {
			return; //no value for this width
		}

		const isXs = colWidth === "xs";

		if (isObject(columnProp)) {
			const colSizeInterfix = isXs ? "-" : `-${colWidth}-`;
			const colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);

			if (columnProp.size || columnProp.size === "") {
				colClasses.push(colClass);
			}

			if (columnProp.push) {
				colClasses.push(`push${colSizeInterfix}${columnProp.push}`);
			}

			if (columnProp.pull) {
				colClasses.push(`pull${colSizeInterfix}${columnProp.pull}`);
			}

			if (columnProp.offset) {
				colClasses.push(`offset${colSizeInterfix}${columnProp.offset}`);
			}
		} else {
			colClasses.push(getColumnSizeClass(isXs, colWidth, columnProp));
		}
	});

	if (!colClasses.length) {
		colClasses.push("col");
	}

	if (className) {
		colClasses.push(className);
	}

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Col", $$slots, ['default']);

	$$self.$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(3, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("$$scope" in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		clean,
		getColumnSizeClass,
		isObject,
		className,
		id,
		props,
		colClasses,
		widths
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(3, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [id, props, colClasses, className, widths, $$props, $$scope, $$slots];
}

class Col extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, { class: 3, id: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Col",
			options,
			id: create_fragment$5.name
		});
	}

	get class() {
		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/index.svelte generated by Svelte v3.20.1 */
const file$6 = "src/routes/index.svelte";

// (38:4) <Col>
function create_default_slot_10(ctx) {
	let h1;
	let t0;
	let t1;
	let p;
	let t2;

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text("Svelte Fullpage");
			t1 = space();
			p = element("p");
			t2 = text("This page is made using svelte-fullpage component, try to scroll, drag with mouse or swipe vertical with finger.");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Svelte Fullpage");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "This page is made using svelte-fullpage component, try to scroll, drag with mouse or swipe vertical with finger.");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file$6, 38, 5, 1075);
			add_location(p, file$6, 41, 5, 1118);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, t2);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(38:4) <Col>",
		ctx
	});

	return block;
}

// (37:3) <Row>
function create_default_slot_9(ctx) {
	let current;

	const col = new Col({
			props: {
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(col.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(col.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(col, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const col_changes = {};

			if (dirty & /*$$scope*/ 8192) {
				col_changes.$$scope = { dirty, ctx };
			}

			col.$set(col_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(col.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(col.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(col, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(37:3) <Row>",
		ctx
	});

	return block;
}

// (36:2) <Container class="text-center">
function create_default_slot_8(ctx) {
	let current;

	const row = new Row({
			props: {
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(row.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(row.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(row, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const row_changes = {};

			if (dirty & /*$$scope*/ 8192) {
				row_changes.$$scope = { dirty, ctx };
			}

			row.$set(row_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(row.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(row.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(row, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(36:2) <Container class=\\\"text-center\\\">",
		ctx
	});

	return block;
}

// (35:1) <FullpageSection sectionId="0" bind:activeSection center>
function create_default_slot_7(ctx) {
	let current;

	const container = new Container({
			props: {
				class: "text-center",
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(container.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(container.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(container, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const container_changes = {};

			if (dirty & /*$$scope*/ 8192) {
				container_changes.$$scope = { dirty, ctx };
			}

			container.$set(container_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(container.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(container.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(container, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(35:1) <FullpageSection sectionId=\\\"0\\\" bind:activeSection center>",
		ctx
	});

	return block;
}

// (50:2) <FullpageSlide slideId="0" bind:activeSlide center>
function create_default_slot_6(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text("a");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			t = claim_text(div_nodes, "a");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file$6, 50, 3, 1471);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(50:2) <FullpageSlide slideId=\\\"0\\\" bind:activeSlide center>",
		ctx
	});

	return block;
}

// (54:2) <FullpageSlide slideId="1" bind:activeSlide class="bg-danger" center>
function create_default_slot_5(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text("a");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			t = claim_text(div_nodes, "a");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file$6, 54, 3, 1582);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(54:2) <FullpageSlide slideId=\\\"1\\\" bind:activeSlide class=\\\"bg-danger\\\" center>",
		ctx
	});

	return block;
}

// (58:2) <FullpageSlide slideId="2" bind:activeSlide center>
function create_default_slot_4(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text("a");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			t = claim_text(div_nodes, "a");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file$6, 58, 3, 1675);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(58:2) <FullpageSlide slideId=\\\"2\\\" bind:activeSlide center>",
		ctx
	});

	return block;
}

// (49:1) <FullpageSection sectionId="1" bind:activeSection bind:activeSlide {slides} class="bg-info" arrows cente>
function create_default_slot_3(ctx) {
	let updating_activeSlide;
	let t0;
	let updating_activeSlide_1;
	let t1;
	let updating_activeSlide_2;
	let current;

	function fullpageslide0_activeSlide_binding(value) {
		/*fullpageslide0_activeSlide_binding*/ ctx[5].call(null, value);
	}

	let fullpageslide0_props = {
		slideId: "0",
		center: true,
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	};

	if (/*activeSlide*/ ctx[1] !== void 0) {
		fullpageslide0_props.activeSlide = /*activeSlide*/ ctx[1];
	}

	const fullpageslide0 = new FullpageSlide({
			props: fullpageslide0_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(fullpageslide0, "activeSlide", fullpageslide0_activeSlide_binding));

	function fullpageslide1_activeSlide_binding(value) {
		/*fullpageslide1_activeSlide_binding*/ ctx[6].call(null, value);
	}

	let fullpageslide1_props = {
		slideId: "1",
		class: "bg-danger",
		center: true,
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	};

	if (/*activeSlide*/ ctx[1] !== void 0) {
		fullpageslide1_props.activeSlide = /*activeSlide*/ ctx[1];
	}

	const fullpageslide1 = new FullpageSlide({
			props: fullpageslide1_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(fullpageslide1, "activeSlide", fullpageslide1_activeSlide_binding));

	function fullpageslide2_activeSlide_binding(value) {
		/*fullpageslide2_activeSlide_binding*/ ctx[7].call(null, value);
	}

	let fullpageslide2_props = {
		slideId: "2",
		center: true,
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	};

	if (/*activeSlide*/ ctx[1] !== void 0) {
		fullpageslide2_props.activeSlide = /*activeSlide*/ ctx[1];
	}

	const fullpageslide2 = new FullpageSlide({
			props: fullpageslide2_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(fullpageslide2, "activeSlide", fullpageslide2_activeSlide_binding));

	const block = {
		c: function create() {
			create_component(fullpageslide0.$$.fragment);
			t0 = space();
			create_component(fullpageslide1.$$.fragment);
			t1 = space();
			create_component(fullpageslide2.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(fullpageslide0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(fullpageslide1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(fullpageslide2.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(fullpageslide0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(fullpageslide1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(fullpageslide2, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const fullpageslide0_changes = {};

			if (dirty & /*$$scope*/ 8192) {
				fullpageslide0_changes.$$scope = { dirty, ctx };
			}

			if (!updating_activeSlide && dirty & /*activeSlide*/ 2) {
				updating_activeSlide = true;
				fullpageslide0_changes.activeSlide = /*activeSlide*/ ctx[1];
				add_flush_callback(() => updating_activeSlide = false);
			}

			fullpageslide0.$set(fullpageslide0_changes);
			const fullpageslide1_changes = {};

			if (dirty & /*$$scope*/ 8192) {
				fullpageslide1_changes.$$scope = { dirty, ctx };
			}

			if (!updating_activeSlide_1 && dirty & /*activeSlide*/ 2) {
				updating_activeSlide_1 = true;
				fullpageslide1_changes.activeSlide = /*activeSlide*/ ctx[1];
				add_flush_callback(() => updating_activeSlide_1 = false);
			}

			fullpageslide1.$set(fullpageslide1_changes);
			const fullpageslide2_changes = {};

			if (dirty & /*$$scope*/ 8192) {
				fullpageslide2_changes.$$scope = { dirty, ctx };
			}

			if (!updating_activeSlide_2 && dirty & /*activeSlide*/ 2) {
				updating_activeSlide_2 = true;
				fullpageslide2_changes.activeSlide = /*activeSlide*/ ctx[1];
				add_flush_callback(() => updating_activeSlide_2 = false);
			}

			fullpageslide2.$set(fullpageslide2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fullpageslide0.$$.fragment, local);
			transition_in(fullpageslide1.$$.fragment, local);
			transition_in(fullpageslide2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fullpageslide0.$$.fragment, local);
			transition_out(fullpageslide1.$$.fragment, local);
			transition_out(fullpageslide2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(fullpageslide0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(fullpageslide1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(fullpageslide2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(49:1) <FullpageSection sectionId=\\\"1\\\" bind:activeSection bind:activeSlide {slides} class=\\\"bg-info\\\" arrows cente>",
		ctx
	});

	return block;
}

// (63:1) <FullpageSection sectionId="2" bind:activeSection center>
function create_default_slot_2(ctx) {
	let embed;
	let embed_src_value;

	const block = {
		c: function create() {
			embed = element("embed");
			this.h();
		},
		l: function claim(nodes) {
			embed = claim_element(nodes, "EMBED", { src: true, type: true });
			this.h();
		},
		h: function hydrate() {
			if (embed.src !== (embed_src_value = "")) attr_dev(embed, "src", embed_src_value);
			attr_dev(embed, "type", "");
			add_location(embed, file$6, 63, 2, 1792);
		},
		m: function mount(target, anchor) {
			insert_dev(target, embed, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(embed);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(63:1) <FullpageSection sectionId=\\\"2\\\" bind:activeSection center>",
		ctx
	});

	return block;
}

// (66:1) <FullpageSection sectionId="3" bind:activeSection class="bg-warning" center>
function create_default_slot_1(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text("a");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			t = claim_text(div_nodes, "a");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file$6, 66, 2, 1915);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(66:1) <FullpageSection sectionId=\\\"3\\\" bind:activeSection class=\\\"bg-warning\\\" center>",
		ctx
	});

	return block;
}

// (34:0) <Fullpage bind:activeSection {sections} arrows drag>
function create_default_slot(ctx) {
	let updating_activeSection;
	let t0;
	let updating_activeSection_1;
	let updating_activeSlide;
	let t1;
	let updating_activeSection_2;
	let t2;
	let updating_activeSection_3;
	let current;

	function fullpagesection0_activeSection_binding(value) {
		/*fullpagesection0_activeSection_binding*/ ctx[4].call(null, value);
	}

	let fullpagesection0_props = {
		sectionId: "0",
		center: true,
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	};

	if (/*activeSection*/ ctx[0] !== void 0) {
		fullpagesection0_props.activeSection = /*activeSection*/ ctx[0];
	}

	const fullpagesection0 = new FullpageSection({
			props: fullpagesection0_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(fullpagesection0, "activeSection", fullpagesection0_activeSection_binding));

	function fullpagesection1_activeSection_binding(value) {
		/*fullpagesection1_activeSection_binding*/ ctx[8].call(null, value);
	}

	function fullpagesection1_activeSlide_binding(value) {
		/*fullpagesection1_activeSlide_binding*/ ctx[9].call(null, value);
	}

	let fullpagesection1_props = {
		sectionId: "1",
		slides: /*slides*/ ctx[3],
		class: "bg-info",
		arrows: true,
		cente: true,
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	};

	if (/*activeSection*/ ctx[0] !== void 0) {
		fullpagesection1_props.activeSection = /*activeSection*/ ctx[0];
	}

	if (/*activeSlide*/ ctx[1] !== void 0) {
		fullpagesection1_props.activeSlide = /*activeSlide*/ ctx[1];
	}

	const fullpagesection1 = new FullpageSection({
			props: fullpagesection1_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(fullpagesection1, "activeSection", fullpagesection1_activeSection_binding));
	binding_callbacks.push(() => bind(fullpagesection1, "activeSlide", fullpagesection1_activeSlide_binding));

	function fullpagesection2_activeSection_binding(value) {
		/*fullpagesection2_activeSection_binding*/ ctx[10].call(null, value);
	}

	let fullpagesection2_props = {
		sectionId: "2",
		center: true,
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	};

	if (/*activeSection*/ ctx[0] !== void 0) {
		fullpagesection2_props.activeSection = /*activeSection*/ ctx[0];
	}

	const fullpagesection2 = new FullpageSection({
			props: fullpagesection2_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(fullpagesection2, "activeSection", fullpagesection2_activeSection_binding));

	function fullpagesection3_activeSection_binding(value) {
		/*fullpagesection3_activeSection_binding*/ ctx[11].call(null, value);
	}

	let fullpagesection3_props = {
		sectionId: "3",
		class: "bg-warning",
		center: true,
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	};

	if (/*activeSection*/ ctx[0] !== void 0) {
		fullpagesection3_props.activeSection = /*activeSection*/ ctx[0];
	}

	const fullpagesection3 = new FullpageSection({
			props: fullpagesection3_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(fullpagesection3, "activeSection", fullpagesection3_activeSection_binding));

	const block = {
		c: function create() {
			create_component(fullpagesection0.$$.fragment);
			t0 = space();
			create_component(fullpagesection1.$$.fragment);
			t1 = space();
			create_component(fullpagesection2.$$.fragment);
			t2 = space();
			create_component(fullpagesection3.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(fullpagesection0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(fullpagesection1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(fullpagesection2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(fullpagesection3.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(fullpagesection0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(fullpagesection1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(fullpagesection2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(fullpagesection3, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const fullpagesection0_changes = {};

			if (dirty & /*$$scope*/ 8192) {
				fullpagesection0_changes.$$scope = { dirty, ctx };
			}

			if (!updating_activeSection && dirty & /*activeSection*/ 1) {
				updating_activeSection = true;
				fullpagesection0_changes.activeSection = /*activeSection*/ ctx[0];
				add_flush_callback(() => updating_activeSection = false);
			}

			fullpagesection0.$set(fullpagesection0_changes);
			const fullpagesection1_changes = {};

			if (dirty & /*$$scope, activeSlide*/ 8194) {
				fullpagesection1_changes.$$scope = { dirty, ctx };
			}

			if (!updating_activeSection_1 && dirty & /*activeSection*/ 1) {
				updating_activeSection_1 = true;
				fullpagesection1_changes.activeSection = /*activeSection*/ ctx[0];
				add_flush_callback(() => updating_activeSection_1 = false);
			}

			if (!updating_activeSlide && dirty & /*activeSlide*/ 2) {
				updating_activeSlide = true;
				fullpagesection1_changes.activeSlide = /*activeSlide*/ ctx[1];
				add_flush_callback(() => updating_activeSlide = false);
			}

			fullpagesection1.$set(fullpagesection1_changes);
			const fullpagesection2_changes = {};

			if (dirty & /*$$scope*/ 8192) {
				fullpagesection2_changes.$$scope = { dirty, ctx };
			}

			if (!updating_activeSection_2 && dirty & /*activeSection*/ 1) {
				updating_activeSection_2 = true;
				fullpagesection2_changes.activeSection = /*activeSection*/ ctx[0];
				add_flush_callback(() => updating_activeSection_2 = false);
			}

			fullpagesection2.$set(fullpagesection2_changes);
			const fullpagesection3_changes = {};

			if (dirty & /*$$scope*/ 8192) {
				fullpagesection3_changes.$$scope = { dirty, ctx };
			}

			if (!updating_activeSection_3 && dirty & /*activeSection*/ 1) {
				updating_activeSection_3 = true;
				fullpagesection3_changes.activeSection = /*activeSection*/ ctx[0];
				add_flush_callback(() => updating_activeSection_3 = false);
			}

			fullpagesection3.$set(fullpagesection3_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fullpagesection0.$$.fragment, local);
			transition_in(fullpagesection1.$$.fragment, local);
			transition_in(fullpagesection2.$$.fragment, local);
			transition_in(fullpagesection3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fullpagesection0.$$.fragment, local);
			transition_out(fullpagesection1.$$.fragment, local);
			transition_out(fullpagesection2.$$.fragment, local);
			transition_out(fullpagesection3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(fullpagesection0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(fullpagesection1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(fullpagesection2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(fullpagesection3, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(34:0) <Fullpage bind:activeSection {sections} arrows drag>",
		ctx
	});

	return block;
}

function create_fragment$6(ctx) {
	let t;
	let updating_activeSection;
	let current;

	function fullpage_activeSection_binding(value) {
		/*fullpage_activeSection_binding*/ ctx[12].call(null, value);
	}

	let fullpage_props = {
		sections: /*sections*/ ctx[2],
		arrows: true,
		drag: true,
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	if (/*activeSection*/ ctx[0] !== void 0) {
		fullpage_props.activeSection = /*activeSection*/ ctx[0];
	}

	const fullpage = new Fullpage({ props: fullpage_props, $$inline: true });
	binding_callbacks.push(() => bind(fullpage, "activeSection", fullpage_activeSection_binding));

	const block = {
		c: function create() {
			t = space();
			create_component(fullpage.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-lm3wds\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			claim_component(fullpage.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Svelte-fullpage";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			mount_component(fullpage, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const fullpage_changes = {};

			if (dirty & /*$$scope, activeSection, activeSlide*/ 8195) {
				fullpage_changes.$$scope = { dirty, ctx };
			}

			if (!updating_activeSection && dirty & /*activeSection*/ 1) {
				updating_activeSection = true;
				fullpage_changes.activeSection = /*activeSection*/ ctx[0];
				add_flush_callback(() => updating_activeSection = false);
			}

			fullpage.$set(fullpage_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fullpage.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fullpage.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			destroy_component(fullpage, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	const sections = ["Svelte Fullpage", "Features", "GitHub", "Future"];

	//Have to set to 0 (or section you wish to display as default), otherwise section will not display
	let activeSection = 0;

	//Same mechanics as in sections
	const slides = ["slides", "arrows", "drag"];

	//Also has to be 0 or specific id of slide
	let activeSlide = 0;

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);

	function fullpagesection0_activeSection_binding(value) {
		activeSection = value;
		$$invalidate(0, activeSection);
	}

	function fullpageslide0_activeSlide_binding(value) {
		activeSlide = value;
		$$invalidate(1, activeSlide);
	}

	function fullpageslide1_activeSlide_binding(value) {
		activeSlide = value;
		$$invalidate(1, activeSlide);
	}

	function fullpageslide2_activeSlide_binding(value) {
		activeSlide = value;
		$$invalidate(1, activeSlide);
	}

	function fullpagesection1_activeSection_binding(value) {
		activeSection = value;
		$$invalidate(0, activeSection);
	}

	function fullpagesection1_activeSlide_binding(value) {
		activeSlide = value;
		$$invalidate(1, activeSlide);
	}

	function fullpagesection2_activeSection_binding(value) {
		activeSection = value;
		$$invalidate(0, activeSection);
	}

	function fullpagesection3_activeSection_binding(value) {
		activeSection = value;
		$$invalidate(0, activeSection);
	}

	function fullpage_activeSection_binding(value) {
		activeSection = value;
		$$invalidate(0, activeSection);
	}

	$$self.$capture_state = () => ({
		Fullpage,
		FullpageSection,
		FullpageSlide,
		Container,
		Row,
		Col,
		sections,
		activeSection,
		slides,
		activeSlide
	});

	$$self.$inject_state = $$props => {
		if ("activeSection" in $$props) $$invalidate(0, activeSection = $$props.activeSection);
		if ("activeSlide" in $$props) $$invalidate(1, activeSlide = $$props.activeSlide);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		activeSection,
		activeSlide,
		sections,
		slides,
		fullpagesection0_activeSection_binding,
		fullpageslide0_activeSlide_binding,
		fullpageslide1_activeSlide_binding,
		fullpageslide2_activeSlide_binding,
		fullpagesection1_activeSection_binding,
		fullpagesection1_activeSlide_binding,
		fullpagesection2_activeSection_binding,
		fullpagesection3_activeSection_binding,
		fullpage_activeSection_binding
	];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment$6.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
